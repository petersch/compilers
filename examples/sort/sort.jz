void merge(int[] in1, int[] in2, int[] out) {
    int p1 = 0, p2 = 0
    while p1 < size(in1) && p2 < size(in2) {
        if in1[p1] <= in2[p2] {
            out[p1+p2] = in1[p1]
            p1 = p1 + 1
        }
        else {
            out[p1+p2] = in2[p2]
            p2 = p2 + 1
        }
    }
    while p1 < size(in1) {
        out[p1+p2] = in1[p1]
        p1 = p1 + 1
    }
    while p2 < size(in2) {
        out[p1+p2] = in2[p2]
        p2 = p2 + 1
    }
}

void merge_sort(int[] pole) {
    if size(pole) == 1 {
        return
    }
    
    int odd = size(pole) % 2
    int sub1[size(pole) / 2 + odd]
    int sub2[size(pole) / 2]
    
    for i in 0...size(sub1) {
        sub1[i] = pole[i]
    }    
    for i in 0...size(sub2) {
        sub2[i] = pole[i + size(sub1)]
    }
    
    merge_sort(sub1)
    merge_sort(sub2)
    merge(sub1, sub2, pole)
}

void main() {
    int n
    read n
    
    int pole[n]
    for i in 0...n {
        read pole[i]
    }
    
    merge_sort(pole)
    
    for i in 0...n {
        write pole[i]
    }
}
